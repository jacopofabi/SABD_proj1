version: '2'

services:
  spark-master:
    image: docker.io/bitnami/spark:3.2.1
    container_name: spark-master
    environment:
      - SPARK_MODE=master
      - SPARK_RPC_AUTHENTICATION_ENABLED=no
      - SPARK_RPC_ENCRYPTION_ENABLED=no
      - SPARK_LOCAL_STORAGE_ENCRYPTION_ENABLED=no
      - SPARK_SSL_ENABLED=no
    ports:
      - '8080:8080'
      - '7077:7077'
      - '4040:4040'

  spark-worker1:
    image: docker.io/bitnami/spark:3.2.1
    container_name: spark-worker1
    environment:
      - SPARK_MODE=worker
      - SPARK_MASTER_URL=spark://spark-master:7077
      - SPARK_WORKER_MEMORY=1G
      - SPARK_WORKER_CORES=1
      - SPARK_RPC_AUTHENTICATION_ENABLED=no
      - SPARK_RPC_ENCRYPTION_ENABLED=no
      - SPARK_LOCAL_STORAGE_ENCRYPTION_ENABLED=no
      - SPARK_SSL_ENABLED=no

  spark-worker2:
    image: docker.io/bitnami/spark:3.2.1
    container_name: spark-worker2
    environment:
      - SPARK_MODE=worker
      - SPARK_MASTER_URL=spark://spark-master:7077
      - SPARK_WORKER_MEMORY=1G
      - SPARK_WORKER_CORES=1
      - SPARK_RPC_AUTHENTICATION_ENABLED=no
      - SPARK_RPC_ENCRYPTION_ENABLED=no
      - SPARK_LOCAL_STORAGE_ENCRYPTION_ENABLED=no
      - SPARK_SSL_ENABLED=no

  spark-worker3:
    image: docker.io/bitnami/spark:3.2.1
    container_name: spark-worker3
    environment:
      - SPARK_MODE=worker
      - SPARK_MASTER_URL=spark://spark-master:7077
      - SPARK_WORKER_MEMORY=1G
      - SPARK_WORKER_CORES=1
      - SPARK_RPC_AUTHENTICATION_ENABLED=no
      - SPARK_RPC_ENCRYPTION_ENABLED=no
      - SPARK_LOCAL_STORAGE_ENCRYPTION_ENABLED=no
      - SPARK_SSL_ENABLED=no
#
  spark-worker4:
    image: docker.io/bitnami/spark:3.2.1
    container_name: spark-worker4
    environment:
      - SPARK_MODE=worker
      - SPARK_MASTER_URL=spark://spark-master:7077
      - SPARK_WORKER_MEMORY=1G
      - SPARK_WORKER_CORES=1
      - SPARK_RPC_AUTHENTICATION_ENABLED=no
      - SPARK_RPC_ENCRYPTION_ENABLED=no
      - SPARK_LOCAL_STORAGE_ENCRYPTION_ENABLED=no
      - SPARK_SSL_ENABLED=no

  hdfs-master:
    image: matnar/hadoop:3.3.2
    container_name: hdfs-master
    stdin_open: true # docker run -i
    tty: true        # docker run -t
    ports:
      - '9870:9870'
      - '54310:54310'
    volumes:
      - ../target:/home
      - ../data:/home/data   

  datanode1:
    image: matnar/hadoop:3.3.2
    container_name: hdfs-worker1
    stdin_open: true # docker run -i
    tty: true        # docker run -t
    ports:
      - '9864:9864'

  datanode2:
    image: matnar/hadoop:3.3.2
    container_name: hdfs-worker2
    stdin_open: true # docker run -i
    tty: true        # docker run -t
    ports:
      - '9863:9864'
      
  datanode3:
    image: matnar/hadoop:3.3.2
    container_name: hdfs-worker3
    stdin_open: true # docker run -i
    tty: true        # docker run -t
    ports:
      - '9862:9864'

  # https://medium.com/geekculture/host-a-fully-persisted-apache-nifi-service-with-docker-ffaa6a5f54a3
  nifi-node:
    image: apache/nifi:latest
    container_name: nifi-master
    restart: on-failure
    ports:
      - '8090:8090'
      - '4557:4557'
    environment:
      - NIFI_WEB_HTTP_PORT=8090
      - NIFI_CLUSTER_IS_NODE=false
      - SINGLE_USER_CREDENTIALS_USERNAME=admin
      - SINGLE_USER_CREDENTIALS_PASSWORD=adminadmin
    volumes:
      - ../nifi/database_repository:/opt/nifi/nifi-current/database_repository
      - ../nifi/flowfile_repository:/opt/nifi/nifi-current/flowfile_repository
      - ../nifi/content_repository:/opt/nifi/nifi-current/content_repository
      - ../nifi/provenance_repository:/opt/nifi/nifi-current/provenance_repository
      - ../nifi/state:/opt/nifi/nifi-current/state
      - ../nifi/logs:/opt/nifi/nifi-current/logs
      - ../nifi/data:/opt/nifi/nifi-current/data
      - ../nifi/conf:/opt/nifi/nifi-current/conf

  mongo-server:
    image: mongo:latest
    container_name: mongo-server
    ports:
      - '27017:27017'

  grafana:
    image: grafana/grafana
    container_name: grafana
    ports:
      - 3001:3000
    volumes:
      - ./grafana/grafana.ini:/etc/grafana/grafana.ini
      - ./grafana/dashboards:/etc/grafana/dashboards
      - ./grafana/provisioning:/etc/grafana/provisioning
      - ../Results:/opt/results
    environment:
    - GF_INSTALL_PLUGINS=marcusolsson-csv-datasource   


networks:
  default:
    name: proj1_network
